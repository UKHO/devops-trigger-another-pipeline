parameters:
  - name: appConfigurationEndpoint
    type: string
    default: ''
  - name: targetPipelineName
    type: string
    default: ''
  - name: organisation
    type: string
    default: ''
  - name: project
    type: string
    default: ''
  - name: pipelineId
    type: string
    default: ''
  - name: powerShellContainer
    type: string
    default: ''
  - name: timeoutInMinutes
    type: number
    default: 60

jobs:
  - job: TriggerAnotherPipeline
    variables:
    - ${{ if eq(parameters.appConfigurationEndpoint, '') }}:
      - group: TriggerAnotherPipeline
    - name: Organisation
      value: ${{ parameters.organisation }} # If not defined, replaced by App Configuration
    - name: Project
      value: ${{ parameters.project }} # If not defined, replaced by App Configuration
    - name: PipelineId
      value: ${{ parameters.pipelineId }} # If not defined, replaced by App Configuration
    ${{ if eq(parameters.targetPipelineName, '') }}:
      displayName: Trigger Another Pipeline
    ${{ else }}:
      displayName: Trigger ${{ parameters.targetPipelineName }}
    ${{ if ne(parameters.powerShellContainer, '') }}: 
      container: ${{ parameters.powerShellContainer }}
    steps:
      - checkout: TriggerAnotherPipeline
        persistCredentials: true
        path: devops-trigger-another-pipeline

      - ${{ if ne(parameters.appConfigurationEndpoint, '') }}:
        - task: AzureAppConfiguration@8
          inputs: # Will parameter all this
            azureSubscription: 'trigger-another-pipeline-sc'
            AppConfigurationEndpoint: ${{ parameters.appConfigurationEndpoint }}
            KeyFilter: 'Pipeline:TriggerAnotherPipeline:*'
            Label: 'Test'
            TrimKeyPrefix: 'Pipeline:TriggerAnotherPipeline:'
            SuppressWarningForOverriddenKeys: true

      - task: PowerShell@2
        name: loadSharedScripts
        timeoutInMinutes: 5
        displayName: "Load shared scripts"
        inputs:
          targetType: filePath
          filePath: "$(Pipeline.Workspace)/devops-trigger-another-pipeline/pwsh/Shared.ps1"

      - task: PowerShell@2
        name: getAccessToken
        timeoutInMinutes: 5
        displayName: "Get access token"
        inputs:
          targetType: filePath
          filePath: "$(Pipeline.Workspace)/devops-trigger-another-pipeline/pwsh/CreateLoginAccessToken.ps1"
          arguments: >
            -ClientId $(ClientId)
            -ClientSecret $(ClientSecret)
            -TenantId $(TenantId)

      - task: PowerShell@2
        name: wait
        timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
        displayName: "Wait until target pipeline is free"
        inputs:
          targetType: filePath
          filePath: "$(Pipeline.Workspace)/devops-trigger-another-pipeline/pwsh/waitUntilTargetPipelineIsFree.ps1"
          arguments: >
            -Organisation $(Organisation)
            -Project $(Project)
            -PipelineId $(PipelineId)
            -AccessToken $(AccessToken)

      - task: PowerShell@2
        name: trigger
        displayName: "Trigger target pipeline and wait"
        timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
        inputs:
          targetType: filePath
          filePath: "$(Pipeline.Workspace)/devops-trigger-another-pipeline/pwsh/triggerPipelineRunAndWaitForResult.ps1"
          arguments: >
            -Organisation $(Organisation)
            -Project $(Project)
            -PipelineId $(PipelineId)
            -AccessToken $(AccessToken)
  