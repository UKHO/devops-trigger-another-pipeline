parameters:
  - name: environment
    type: string
    default: "qa"
  - name: serviceConnection
    type: string

jobs:
  - job: TriggerADDSAutoTestsPipeline
    displayName: "Trigger ${{ parameters.environment }} ADDS AutoTests Pipeline"
    container: "ukhydrographicoffice/terraform-powershell:1.8.5" 
    steps:
      - checkout: TriggerADDSAutoTestsPipeline
        persistCredentials: true
        path: devops-trigger-adds-autotests-pipeline

      - task: AzureAppConfiguration@8
        inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            AppConfigurationEndpoint: https://triggeranotherpipeline-appconfig-uks.azconfig.io
            KeyFilter: 'Pipeline:TriggerAnotherPipeline:*'
            Label: ${{ parameters.environment }}
            TrimKeyPrefix: 'Pipeline:TriggerAnotherPipeline:'
            SuppressWarningForOverriddenKeys: true

      - task: PowerShell@2
        name: getAccessToken
        timeoutInMinutes: 5
        displayName: "Get access token"
        inputs:
          targetType: filePath
          filePath: "$(Pipeline.Workspace)/devops-trigger-adds-autotests-pipeline/pwsh/CreateLoginAccessToken.ps1"
          arguments: >
            -ClientId $(ClientId)
            -ClientSecret $(ClientSecret)
            -TenantId $(TenantId)

      - task: PowerShell@2
        name: wait
        timeoutInMinutes: 60
        displayName: "Wait until target pipeline is free"
        inputs:
          targetType: filePath
          filePath: "$(Pipeline.Workspace)/devops-trigger-adds-autotests-pipeline/pwsh/WaitUntilTargetPipelineIsFree.ps1"
          arguments: >
            -Organisation $(Organisation)
            -Project $(Project)
            -PipelineId $(PipelineId)
            -AccessToken $(AccessToken)

      - task: PowerShell@2
        name: trigger
        displayName: "Trigger target pipeline and wait"
        timeoutInMinutes: 60
        inputs:
          targetType: filePath
          filePath: "$(Pipeline.Workspace)/devops-trigger-adds-autotests-pipeline/pwsh/TriggerPipelineRunAndWaitForResult.ps1"
          arguments: >
            -Organisation $(Organisation)
            -Project $(Project)
            -PipelineId $(PipelineId)
            -AccessToken $(AccessToken)
  
